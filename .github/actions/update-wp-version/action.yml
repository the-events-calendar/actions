name: Update WordPress Version
description: 'Updates WordPress version requirements in plugin files and workflows'

inputs:
  tested-up-to:
    description: 'WordPress version to set as "tested up to" version (e.g. 6.8.1)'
    required: true
  update-min-version:
    description: 'Update minimum required version to 2 minor versions behind tested version?'
    required: false
    default: 'no'
  gh-bot-token:
    description: 'GitHub bot token for authentication'
    required: false
    default: ${{ github.token }}

outputs:
  pull-request-url:
    description: 'URL of the created pull request'
    value: ${{ steps.create-pr.outputs.pull-request-url }}
  pull-request-number:
    description: 'Number of the created pull request'
    value: ${{ steps.create-pr.outputs.pull-request-number }}
  tested-version:
    description: 'The tested up to version that was set'
    value: ${{ inputs.tested-up-to }}
  min-version:
    description: 'The minimum required version that was calculated/set'
    value: ${{ steps.calculate-versions.outputs.min_version }}
  files-updated:
    description: 'List of files that were updated'
    value: ${{ steps.update-files.outputs.updated_files }}

runs:
  using: composite
  steps:
    - name: Setup environment
      uses: the-events-calendar/actions/.github/actions/basic-setup@main
      with:
        setup-php: 'false'
        setup-node: 'false'
        fetch-depth: '0'

    - name: Setup Git configuration
      uses: the-events-calendar/actions/.github/actions/setup-git@main

    - name: Validate inputs and calculate versions
      id: calculate-versions
      shell: bash
      run: |
        TESTED_VERSION="${{ inputs.tested-up-to }}"
        UPDATE_MIN="${{ inputs.update-min-version }}"

        echo "## WordPress Version Updates" >> $GITHUB_STEP_SUMMARY
        echo "- **Tested Up To**: \`$TESTED_VERSION\`" >> $GITHUB_STEP_SUMMARY

        # Validate tested version format
        if ! [[ "$TESTED_VERSION" =~ ^[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
          echo "❌ Invalid version format: $TESTED_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "Expected format: X.Y or X.Y.Z (e.g., 6.8 or 6.8.1)"
          exit 1
        fi

        # Calculate minimum version (2 minor versions behind)
        IFS='.' read -r -a tested_parts <<< "$TESTED_VERSION"
        min_major=$((tested_parts[0]))
        min_minor=$((tested_parts[1] - 2))

        # Ensure minimum version doesn't go below 5.0
        if [ "$min_minor" -lt 0 ]; then
          min_major=$((min_major - 1))
          min_minor=$((12 + min_minor))  # Assuming 12 releases per year
        fi

        if [ "$min_major" -lt 5 ]; then
          min_major=5
          min_minor=0
        fi

        MIN_VERSION="$min_major.$min_minor"

        echo "- **Update Minimum**: \`$UPDATE_MIN\`" >> $GITHUB_STEP_SUMMARY
        if [ "$UPDATE_MIN" = "yes" ]; then
          echo "- **New Minimum Required**: \`$MIN_VERSION\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Minimum Required**: Unchanged" >> $GITHUB_STEP_SUMMARY
        fi

        echo "tested_version=$TESTED_VERSION" >> $GITHUB_OUTPUT
        echo "min_version=$MIN_VERSION" >> $GITHUB_OUTPUT
        echo "update_min=$UPDATE_MIN" >> $GITHUB_OUTPUT

    - name: Create branch for changes
      id: create-branch
      shell: bash
      run: |
        timestamp=$(date +%Y%m%d-%H%M%S)
        sha_short=$(git rev-parse --short ${{ github.sha }})
        BRANCH_NAME="task/update-wp-version-$timestamp-$sha_short"

        echo "## Branch Creation" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`$BRANCH_NAME\`" >> $GITHUB_STEP_SUMMARY

        git checkout -b "$BRANCH_NAME"
        git push --set-upstream origin "$BRANCH_NAME"

        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

    - name: Update WordPress version requirements
      id: update-files
      shell: bash
      run: |
        TESTED_VERSION="${{ steps.calculate-versions.outputs.tested_version }}"
        MIN_VERSION="${{ steps.calculate-versions.outputs.min_version }}"
        UPDATE_MIN="${{ steps.calculate-versions.outputs.update_min }}"

        echo "## File Updates" >> $GITHUB_STEP_SUMMARY
        updated_files=()

        # Update readme.txt
        if [ -f "readme.txt" ]; then
          echo "### \`readme.txt\`" >> $GITHUB_STEP_SUMMARY

          # Update tested up to version
          if sed -i "s/Tested up to: [0-9.]*/Tested up to: $TESTED_VERSION/" readme.txt; then
            echo "✅ Updated 'Tested up to' version" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Could not update 'Tested up to' version" >> $GITHUB_STEP_SUMMARY
          fi

          # Update minimum version if requested
          if [ "$UPDATE_MIN" = "yes" ]; then
            if sed -i "s/Requires at least: [0-9.]*/Requires at least: $MIN_VERSION/" readme.txt; then
              echo "✅ Updated 'Requires at least' version" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Could not update 'Requires at least' version" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          updated_files+=("readme.txt")
        else
          echo "⚠️ readme.txt not found" >> $GITHUB_STEP_SUMMARY
        fi

        # Update main plugin file (if minimum version is being updated)
        if [ "$UPDATE_MIN" = "yes" ] && [ -f ".puprc" ]; then
          echo "### Plugin PHP File" >> $GITHUB_STEP_SUMMARY

          # Find main plugin PHP file from .puprc
          PLUGIN_FILE=$(jq -r '.paths.versions[]? | select(.file | test("^[^/]+\\.php$")) | .file' .puprc 2>/dev/null | head -1)

          if [ -n "$PLUGIN_FILE" ] && [ -f "$PLUGIN_FILE" ]; then
            echo "- **File**: \`$PLUGIN_FILE\`" >> $GITHUB_STEP_SUMMARY

            if sed -i "s/Requires at least: [0-9.]*/Requires at least: $MIN_VERSION/" "$PLUGIN_FILE"; then
              echo "✅ Updated 'Requires at least' version" >> $GITHUB_STEP_SUMMARY
              updated_files+=("$PLUGIN_FILE")
            else
              echo "⚠️ Could not update 'Requires at least' version" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Main plugin PHP file not found or .puprc not configured" >> $GITHUB_STEP_SUMMARY
          fi
        fi

        # Update workflow files (if minimum version is being updated)
        if [ "$UPDATE_MIN" = "yes" ] && [ -d ".github/workflows" ]; then
          echo "### Workflow Files" >> $GITHUB_STEP_SUMMARY

          workflow_updated=false
          for wf in .github/workflows/*.yml; do
            [ ! -f "$wf" ] && continue
            [ "$(basename "$wf")" = "update-wp-version.yml" ] && continue

            # Look for wp core update commands and update the version
            if grep -q "wp core update.*--version=" "$wf"; then
              if sed -i "s/wp core update\([^-]*\)--version=[0-9.]*/wp core update\1--version=$MIN_VERSION/" "$wf"; then
                echo "- ✅ Updated \`$(basename "$wf")\`" >> $GITHUB_STEP_SUMMARY
                updated_files+=("$wf")
                workflow_updated=true
              fi
            fi
          done

          if [ "$workflow_updated" = false ]; then
            echo "- ℹ️ No workflow files needed updating" >> $GITHUB_STEP_SUMMARY
          fi
        fi

        # Output updated files as JSON array
        printf -v updated_files_json '%s\n' "${updated_files[@]}" | jq -R . | jq -s .
        echo "updated_files=$updated_files_json" >> $GITHUB_OUTPUT

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Total files updated**: ${#updated_files[@]}" >> $GITHUB_STEP_SUMMARY

    - name: Commit changes
      shell: bash
      run: |
        # Check if there are any changes to commit
        if [ -n "$(git status --porcelain)" ]; then
          git add -A
          git commit -m "Update WordPress version requirements

- Set tested up to version to ${{ steps.calculate-versions.outputs.tested_version }}
${{ steps.calculate-versions.outputs.update_min == 'yes' && format('- Set minimum required version to {0}', steps.calculate-versions.outputs.min_version) || '- Kept minimum required version unchanged' }}

Generated by: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          git push origin "${{ steps.create-branch.outputs.branch_name }}"
          echo "✅ Changes committed and pushed" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ No changes to commit" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Create Pull Request
      id: create-pr
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ inputs.gh-bot-token }}
        base: ${{ github.ref_name }}
        branch: ${{ steps.create-branch.outputs.branch_name }}
        title: "[BOT] Update WordPress version requirements"
        body: |
          This PR updates the WordPress version requirements for better compatibility.

          **Changes Made:**
          - **Tested Up To**: `${{ steps.calculate-versions.outputs.tested_version }}`
          ${{ steps.calculate-versions.outputs.update_min == 'yes' && format('- **Minimum Required**: `{0}` (2 minor versions behind tested)', steps.calculate-versions.outputs.min_version) || '- **Minimum Required**: Unchanged' }}

          **Files Updated:**
          ${{ fromJson(steps.update-files.outputs.updated_files)[0] && '- ' || '' }}${{ join(fromJson(steps.update-files.outputs.updated_files), '\n- ') }}

          **Skip Flags**: [skip-changelog] [skip-lint] [skip-phpcs]

          ---
          *This PR was automatically created by ${{ github.actor }} using the update-wp-version action.*
          *Generated by*: [GitHub Action](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        labels: "automation,wordpress-version"
        assignees: ${{ github.actor }}

    - name: Display results
      shell: bash
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Results" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.create-pr.outputs.pull-request-number }}" ]; then
          echo "✅ **Pull Request Created**" >> $GITHUB_STEP_SUMMARY
          echo "- **Number**: [${{ steps.create-pr.outputs.pull-request-number }}](${{ steps.create-pr.outputs.pull-request-url }})" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.create-pr.outputs.pull-request-url }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Failed to create pull request" >> $GITHUB_STEP_SUMMARY
        fi
