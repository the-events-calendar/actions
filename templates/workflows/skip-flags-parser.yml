name: Skip Flags Parser

# Parses PR descriptions for skip flags and posts a summary comment
# This workflow helps developers and reviewers quickly see which workflows will be skipped
on:
  pull_request:
    types: [opened, synchronize, edited]

jobs:
  parse-skip-flags:
    name: Parse and Report Skip Flags
    runs-on: ubuntu-latest
    steps:
      - name: Setup environment
        uses: the-events-calendar/actions/.github/actions/base-setup@test/new-actions
        with:
          setup-php: 'false'
          setup-node: 'false'

      - name: Parse skip flags from PR description
        id: parse-flags
        shell: bash
        run: |
          # Get the PR body and ensure it's not empty
          PR_BODY="${{ github.event.pull_request.body }}"

          if [ -z "$PR_BODY" ]; then
            echo "PR body is empty, no skip flags to process."
            echo "has_skips=false" >> $GITHUB_OUTPUT
            echo "message=No workflows were skipped." >> $GITHUB_OUTPUT
            exit 0
          fi

          # Use regex to find all skip flags in the format [skip-*]
          skip_flags=$(echo "$PR_BODY" | grep -ioE '\[skip-[^]]+\]' | sort -u || true)

          if [ -z "$skip_flags" ]; then
            echo "has_skips=false" >> $GITHUB_OUTPUT
            echo "message=No workflows were skipped." >> $GITHUB_OUTPUT
            echo "## Skip Flags Analysis" >> $GITHUB_STEP_SUMMARY
            echo "✅ No skip flags found in PR description." >> $GITHUB_STEP_SUMMARY
          else
            echo "has_skips=true" >> $GITHUB_OUTPUT
            
            # Process each flag
            flag_count=0
            flag_list=""
            message_content="## ⚠️ Skipped Workflows

The following workflows will be skipped based on flags in your PR description:
"
            
            # Create summary for step output
            echo "## Skip Flags Analysis" >> $GITHUB_STEP_SUMMARY

            while IFS= read -r flag; do
              [ -z "$flag" ] && continue
              flag_count=$((flag_count + 1))
              
              # Extract the part after "skip-" and before "]"
              flag_name=$(echo "$flag" | sed 's/\[skip-\(.*\)\]/\1/' | tr '[:upper:]' '[:lower:]')

              # Create human-readable description
              case "$flag_name" in
                "phpcs")
                  description="PHP CodeSniffer"
                  ;;
                "phpstan")
                  description="PHPStan Static Analysis"
                  ;;
                "lint")
                  description="Linting"
                  ;;
                "tests")
                  description="All Tests"
                  ;;
                "changelog")
                  description="Changelog Validation"
                  ;;
                *)
                  # Generic description: convert dashes to spaces and capitalize words
                  description=$(echo "$flag_name" | tr '-' ' ' | sed 's/\b\w/\U&/g')
                  ;;
              esac
              
              # Add to outputs
              if [ -z "$flag_list" ]; then
                flag_list="$flag"
              else
                flag_list="$flag_list,$flag"
              fi
              
              # Add to step summary
              echo "- \`$flag\` → $description" >> $GITHUB_STEP_SUMMARY
              
              # Add to message
              message_content="${message_content}
- ✋ **${description}**"
            done <<< "$skip_flags"

            # Finalize message
            message_content="${message_content}

---
*This comment was automatically generated by the Skip Flags Parser workflow.*"

            echo "⚠️ Found $flag_count skip flag(s):" >> $GITHUB_STEP_SUMMARY
            echo "skipped_workflows=$flag_list" >> $GITHUB_OUTPUT
            
            # Set message output using a simpler approach
            {
              echo "message<<SKIP_FLAGS_EOF"
              echo "$message_content"
              echo "SKIP_FLAGS_EOF"
            } >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR with skip summary
        if: steps.parse-flags.outputs.has_skips == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Check if a skip flags comment already exists
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(comment =>
              comment.body.includes('⚠️ Skipped Workflows') &&
              comment.user.type === 'Bot'
            );

            const body = `${{ steps.parse-flags.outputs.message }}`;

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
              console.log('Updated existing skip flags comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
              console.log('Created new skip flags comment');
            }
