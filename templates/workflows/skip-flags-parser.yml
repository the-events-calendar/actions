name: Skip Flags Parser

# Parses PR descriptions for skip flags and posts a summary comment
# This workflow helps developers and reviewers quickly see which workflows will be skipped
on:
  pull_request:
    types: [opened, synchronize, edited]

jobs:
  parse-skip-flags:
    name: Parse and Report Skip Flags
    runs-on: ubuntu-latest
    steps:
      - name: Setup environment
        uses: the-events-calendar/actions/.github/actions/basic-setup@main
        with:
          setup-php: 'false'
          setup-node: 'false'

      - name: Parse skip flags from PR description
        id: parse-flags
        shell: bash
        run: |
          # Get the PR body and ensure it's not empty
          PR_BODY="${{ github.event.pull_request.body }}"
          
          if [ -z "$PR_BODY" ]; then
            echo "PR body is empty, no skip flags to process."
            echo "skipped_workflows=" >> $GITHUB_OUTPUT
            echo "has_skips=false" >> $GITHUB_OUTPUT
            echo "message=No workflows were skipped." >> $GITHUB_OUTPUT
            exit 0
          fi

          # Define all possible skip flags with descriptions
          declare -A skip_flags=(
            ["[skip-phpcs]"]="PHP CodeSniffer"
            ["[skip-views-core]"]="Core Views Tests"
            ["[skip-views-integration]"]="Views Integration Tests"
            ["[skip-views-full-suite]"]="Full Views Test Suite"
            ["[skip-tests-php]"]="PHP Tests"
            ["[skip-tests-integrations]"]="Third-Party Integration Tests"
            ["[skip-phpstan]"]="PHPStan Static Analysis"
            ["[skip-lint]"]="Linting"
          )

          # Initialize arrays to store found flags
          found_flags=()
          found_descriptions=()

          # Check for each skip flag (case-insensitive)
          for flag in "${!skip_flags[@]}"; do
            if [[ "${PR_BODY,,}" == *"${flag,,}"* ]]; then
              found_flags+=("$flag")
              found_descriptions+=("${skip_flags[$flag]}")
            fi
          done

          # Create the output
          if [ ${#found_flags[@]} -eq 0 ]; then
            echo "skipped_workflows=" >> $GITHUB_OUTPUT
            echo "has_skips=false" >> $GITHUB_OUTPUT
            echo "message=No workflows were skipped." >> $GITHUB_OUTPUT
            echo "## Skip Flags Analysis" >> $GITHUB_STEP_SUMMARY
            echo "✅ No skip flags found in PR description." >> $GITHUB_STEP_SUMMARY
          else
            # Convert array to JSON format for output
            flags_json=$(printf '%s\n' "${found_flags[@]}" | jq -R . | jq -s .)
            echo "skipped_workflows=$flags_json" >> $GITHUB_OUTPUT
            echo "has_skips=true" >> $GITHUB_OUTPUT

            # Create summary for step output
            echo "## Skip Flags Analysis" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Found ${#found_flags[@]} skip flag(s):" >> $GITHUB_STEP_SUMMARY
            for i in "${!found_flags[@]}"; do
              echo "- \`${found_flags[$i]}\` → ${found_descriptions[$i]}" >> $GITHUB_STEP_SUMMARY
            done

            # Create formatted message for PR comment
            message="## ⚠️ Skipped Workflows"
            message+=$'\n\nThe following workflows will be skipped based on flags in your PR description:'
            message+=$'\n'
            for desc in "${found_descriptions[@]}"; do
              message+=$'\n- ✋ **'$desc'**'
            done
            message+=$'\n\n---'
            message+=$'\n*This comment was automatically generated by the Skip Flags Parser workflow.*'

            # Use proper multiline output format
            {
              echo "message<<EOF"
              echo "$message"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR with skip summary
        if: steps.parse-flags.outputs.has_skips == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Check if a skip flags comment already exists
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(comment => 
              comment.body.includes('⚠️ Skipped Workflows') && 
              comment.user.type === 'Bot'
            );

            const body = `${{ steps.parse-flags.outputs.message }}`;

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
              console.log('Updated existing skip flags comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
              console.log('Created new skip flags comment');
            }
